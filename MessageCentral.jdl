
application {
  config {
    applicationType monolith,
    authenticationType jwt,
    baseName MessageCentral,
    buildTool maven,
    cacheProvider ehcache,
    clientFramework vue,
    clientPackageManager npm,
    clientTheme lumen,
    clientThemeVariant primary,
    databaseType sql,
    devDatabaseType h2Disk,
    dtoSuffix DTO,
    enableHibernateCache true,
    enableSwaggerCodegen true,
    enableTranslation true,
    jhiPrefix jhi,
    languages [en, fa],
    messageBroker false,
    nativeLanguage en,
    packageName com.glinboy.app,
    prodDatabaseType postgresql,
    reactive false,
    searchEngine false,
    serverPort 8080,
    serviceDiscoveryType eureka,
    skipClient false,
    skipServer false,
    skipUserManagement false,
    websocket false
  }
  entities Email, ShortMessage, Notification, NotificationData, Token
}

entity Email {
  receiver String required minlength(8) maxlength(128) pattern(/^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$/)
  subject String required minlength(4) maxlength(128)
  content TextBlob required
  status MessageStatus
  createdAt Instant required
  createdBy String required
}

entity ShortMessage {
  phoneNumber String required minlength(7) maxlength(15) pattern(/^\+(?:[0-9]‚óè?){6,14}[0-9]$/)
  content String required minlength(6) maxlength(160)
  status MessageStatus
  createdAt Instant required
  createdBy String required
}

entity Notification {
  username String required maxlength(64)
  token String required maxlength(164)
  subject String required maxlength(128)
  content String required maxlength(4000)
  image String maxlength(256)
  status MessageStatus
  createdAt Instant required
}

entity NotificationData {
  key String required maxlength(128)
  value String required maxlength(256)
}

enum MessageStatus {
  IN_QUEUE,
  SENT,
  FAILED
}

entity Token {
    name String required unique maxlength(64)
    token String required maxlength(512)
    disable Boolean required
    createdAt Instant required
    deprecateAt Instant required
    roles Integer required
}

relationship OneToMany {
  Notification{data} to NotificationData{notification required}
}

dto Email, ShortMessage, Notification, Token with mapstruct
paginate Email, ShortMessage, Notification, Token with pagination
service Email, ShortMessage, Notification, Token with serviceImpl
filter Email, ShortMessage, Notification, Token